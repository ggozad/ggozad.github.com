<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: backbone.js | ggozad]]></title>
  <link href="http://ggozad.com/blog/categories/backbone-js/atom.xml" rel="self"/>
  <link href="http://ggozad.com/"/>
  <updated>2012-05-04T15:53:08+02:00</updated>
  <id>http://ggozad.com/</id>
  <author>
    <name><![CDATA[Yiorgis Gozadinos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Pub-Sub storage for Backbone using XMPP]]></title>
    <link href="http://ggozad.com/blog/2012/05/03/a-pub-sub-storage-for-backbone-using-xmpp/"/>
    <updated>2012-05-03T16:54:00+02:00</updated>
    <id>http://ggozad.com/blog/2012/05/03/a-pub-sub-storage-for-backbone-using-xmpp</id>
    <content type="html"><![CDATA[<p><a href="http://documentcloud.github.com/backbone/">Backbone.js</a> is a popular framework for building web applications with javascript. Building on top of the excellent <a href="http://documentcloud.github.com/underscore">Underscore.js</a>, it provides the basic app-building blocks, <em>Models</em>, <em>Collections</em> and <em>Views</em> as well as a simple <em>Router</em>.</p>

<p>In order to connect models and collections with the server-side of things, Backbone's default approach is CRUD through RESTful Ajax requests. All the operations that read from or persist data to the server are delegated to a <code>sync()</code> function that translates <em>create</em>, <em>read</em>, <em>update</em>, <em>delete</em> to <em>PUT</em>, <em>GET</em>, <em>POST</em>, <em>DELETE</em> through jQuery.</p>

<p>What I enjoy the most about Backbone is its simplicity, how it gives me what I need to be productive, no more no less. In the case of the storage layer, one only needs to override <code>sync</code> in order to use an alternative. A popular example is <a href="https://github.com/jeromegn/Backbone.localStorage">Backbone.localStorage</a> which, persists to the browser's <em>localStorage</em>.</p>

<p>I have been part of building a team collaboration web application centered around XMPP at Riot AS. I will post details about the architecture on which the app is based, but in short we have <em>completely</em> replaced Ajax requests in favor of doing all client-server as well as client-client communications through XMPP. To do so, the need arose of a storage adapter to XMPP, and <a href="http://ggozad.github.com/Backbone.xmpp">Backbone.xmpp</a> was born.</p>

<p><strong>Backbone.xmpp</strong> (<a href="http://ggozad.github.com/Backbone.xmpp">GitHub</a>)is a drop-in replacement for Backbone's RESTful API, allowing models/collections to be persisted on <a href="http://xmpp.org/extensions/xep-0060.html">XMPP Pub-Sub nodes</a>. Naturally, Collections are mapped to <em>nodes</em>, whereas Models to the <em>items</em> of these nodes. Additionally, it listens for events on these nodes, receiving and propagating real-time updates of the models/collections from the server. Apart from Backbone, it depends on <a href="http://github.com/metajack/strophejs">Strophe</a> as well as my <a href="http://ggozad.github.com/strophe.plugins">Strophe plugins</a> for Pub-Sub.</p>

<p>For example, if you had a collection of type <code>BookCase</code> consisting of models of type <code>Book</code>, you could write:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Book</span> <span class="o">=</span> <span class="nx">PubSubItem</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">BookCase</span> <span class="o">=</span> <span class="nx">PubSubNode</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">model</span><span class="o">:</span> <span class="nx">Book</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">home</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BookCase</span><span class="p">([],</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;/home/bookcase&#39;</span><span class="p">,</span> <span class="nx">connection</span><span class="o">:</span> <span class="nx">xmpp_connection</span><span class="p">});</span>
</span><span class='line'><span class="nx">home</span><span class="p">.</span><span class="nx">fetch</span><span class="p">();</span>
</span><span class='line'><span class="nx">home</span><span class="p">.</span><span class="nx">add</span><span class="p">({</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Developing Backbone.js Applications&#39;</span><span class="p">,</span> <span class="nx">author</span><span class="o">:</span> <span class="s1">&#39;Addy Osmani&#39;</span><span class="p">});</span>
</span><span class='line'><span class="nx">home</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>which would</p>

<ul>
<li>create a <code>BookCase</code> instance by passing its <code>id</code> and the Strophe <code>connection</code> in the options,</li>
<li>fetch it from the server,</li>
<li>add a book to the collection,</li>
<li>and persist to Pub-Sub.</li>
</ul>


<p> In your views you could be doing</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">BookCaseView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">addBook</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'>
</span><span class='line'><span class="nx">addBook</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">book</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bview</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BookView</span><span class="p">({</span><span class="nx">model</span><span class="o">:</span> <span class="nx">book</span><span class="p">});</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">bview</span><span class="p">.</span><span class="nx">render</span><span class="p">().</span><span class="nx">$el</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="p">....</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, if somebody else added a book to the bookcase, you would promptly receive a notification, the <code>add</code> event would be fired on your bookcase and the book's view would appear to your browser.</p>

<p>To visualize how this works, here's a quick demo of the <a href="http://documentcloud.github.com/backbone/examples/todos/index.html">Todo.app</a> adapted to he XMPP storage. You can see the full code <a href="http://github.com/ggozad/Backbone.xmpptodos">here</a>.</p>

<p><iframe width="400" height="225" src="http://player.vimeo.com/video/40685900 " frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>

<p>Finally, if you do not want to receive push notifications on your models/collections or wish to craft your own events, you do not have to extend from <code>PubSubNode</code>, <code>PubSubItem</code>. In your own code, override <code>sync</code> in both the model and the collection and provide an instance of <code>PubSubStorage</code> as <code>node</code>on your collection. For instance:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">MyCollection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">sync</span><span class="o">:</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">xmppSync</span><span class="p">,</span>
</span><span class='line'><span class="nx">model</span><span class="o">:</span> <span class="nx">MyModel</span><span class="p">,</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">mycollection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyCollection</span><span class="p">();</span>
</span><span class='line'><span class="nx">mycollection</span><span class="p">.</span><span class="nx">node</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PubSubStorage</span><span class="p">(</span><span class="s1">&#39;mymodels&#39;</span><span class="p">,</span> <span class="nx">connection</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">MyModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>    <span class="nx">sync</span><span class="o">:</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">xmppSync</span><span class="p">,</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">mymodel</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyModel</span><span class="p">();</span>
</span><span class='line'><span class="nx">mycollection</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">mymodel</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can then subscribe to the XMPP notifications elsewhere, say for example in your collection view:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">connection</span><span class="p">.</span><span class="nx">PubSub</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s1">&#39;xmpp:pubsub:item-published:mymodels&#39;</span><span class="p">,</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">itemPublished</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There you go. Hope you will find this useful, will be looking forward to your contributions!</p>
]]></content>
  </entry>
  
</feed>
